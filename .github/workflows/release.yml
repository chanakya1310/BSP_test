name: Release

on:
  push:
    branches: [master]
    tags:
      - '*'

jobs:
  # macOS-release:
  #   runs-on: [macos-latest]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: "3.6"

  #     - name: Setup build environment
  #       run: |
  #         pip install -r requirements.txt
  #         brew install expect
  #         echo "::set-env name=VERSION::$(cat version)"

  #     - name: Login to FBS
  #       run: /usr/bin/expect .github/scripts/mac/login.sh
  #       env:
  #         FBS_USER: ${{ secrets.FBS_USER }}
  #         FBS_PASS: ${{ secrets.FBS_PASS }}
  #         GPG_PASS: ${{ secrets.GPG_PASS }}

  #     - name: Build Installer
  #       run: /usr/bin/expect .github/scripts/mac/release.sh

  #     - name: Export setup dmg as .zip artifact
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: macOS dmg
  #         path: target/HandWriter.dmg

  Windows-release:
    runs-on: [windows-latest]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: "3.6"

      - name: Setup build environment
        run: |
          pip install pywin32
          pip install -r requirements.txt
          # echo "::set-env name=VERSION::1.0.0"
        env:
          VERSION: 1.0.0 
    
      - name: Release
        run: |
          python .\.github\scripts\windows\release.py

      - name: Folder Name
        run: |
          cd
          # dir target

      - name: Export installer as .zip artifact
        uses: actions/upload-artifact@v1
        with:
          name: Windows Installer
          path: target/GenreSetup.exe

  # Debian-release:
  #   runs-on: [ubuntu-latest]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: "3.6"
        
  #     - name: Set repo ID
  #       run: |
  #         echo "::set-env name=REPO::GDGVIT/HandWriter"

  #     - name: Setup release environment
  #       if: github.repository == ${{ env.REPO }}
  #       run:  | 
  #         sudo apt-get install expect
  #         pip install fbs
  #         echo "::set-env name=VERSION::$(cat version)"
  #         # Login with appropriate credentials
  #         /usr/bin/expect .github/scripts/linux-base/login.sh 
  #       env:
  #         FBS_USER: ${{ secrets.FBS_USER }}
  #         FBS_PASS: ${{ secrets.FBS_PASS }}
  #         GPG_PASS: ${{ secrets.GPG_PASS }}
  #         EMAIL: ${{ secrets.EMAIL }}
  #         NAME: ${{ secrets.NAME }}

  #     - name: Build VM
  #       if: github.repository == ${{ env.REPO }}
  #       run: fbs buildvm ubuntu

  #     - name: Release
  #       if: github.repository == ${{ env.REPO }}
  #       run: |
  #         chmod a+x .github/scripts/ubuntu/release.sh
  #         .github/scripts/ubuntu/release.sh

  # Arch-Release:
  #   runs-on: [ubuntu-latest]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: "3.6"

  #     - name: Set repo ID
  #       run: |
  #         echo "::set-env name=REPO::GDGVIT/HandWriter"

  #     - name: Setup release environment
  #       if: github.repository == ${{ env.REPO }}
  #       run:  | 
  #         sudo apt-get install expect
  #         pip install fbs
  #         echo "::set-env name=VERSION::$(cat version)"
  #         # Login with appropriate credentials
  #         /usr/bin/expect .github/scripts/linux-base/login.sh 
  #       env:
  #         FBS_USER: ${{ secrets.FBS_USER }}
  #         FBS_PASS: ${{ secrets.FBS_PASS }}
  #         GPG_PASS: ${{ secrets.GPG_PASS }}
  #         EMAIL: ${{ secrets.EMAIL }}
  #         NAME: ${{ secrets.NAME }}

  #     - name: Build VM
  #       if: github.repository == ${{ env.REPO }}
  #       run: fbs buildvm arch

  #     - name: Release
  #       if: github.repository == ${{ env.REPO }}
  #       run: |
  #         chmod a+x .github/scripts/arch/release.sh
  #         .github/scripts/arch/release.sh

  # Fedora-Release:
  #   runs-on: [ubuntu-latest]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: "3.6"

  #     - name: Set repo ID
  #       run: |
  #         echo "::set-env name=REPO::GDGVIT/HandWriter"      

  #     - name: Setup release environment
  #       if: github.repository == ${{ env.REPO }}
  #       run:  | 
  #         sudo apt-get install expect
  #         pip install fbs
  #         echo "::set-env name=VERSION::$(cat version)"
  #         # Login with appropriate credentials
  #         /usr/bin/expect .github/scripts/linux-base/login.sh 
  #       env:
  #         FBS_USER: ${{ secrets.FBS_USER }}
  #         FBS_PASS: ${{ secrets.FBS_PASS }}
  #         GPG_PASS: ${{ secrets.GPG_PASS }}
  #         EMAIL: ${{ secrets.EMAIL }}
  #         NAME: ${{ secrets.NAME }}

  #     - name: Build VM
  #       if: github.repository == ${{ env.REPO }}
  #       run: fbs buildvm fedora

  #     - name: Release
  #       if: github.repository == ${{ env.REPO }}
  #       run: |
  #         chmod a+x .github/scripts/fedora/release.sh
  #         .github/scripts/fedora/release.sh

  Publish:
    runs-on: [ubuntu-latest]
    needs: [Windows-release]

    steps:
      - uses: actions/checkout@v2
      - uses: webfactory/ssh-agent@v0.2.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # - uses: actions/download-artifact@v2
      #   with:
      #     name: macOS dmg

      - uses: actions/download-artifact@v2
        with:
          name: Windows Installer

      - name: Set repo ID
        run: |
          echo "::set-env name=REPO::'chanakya1310/BSP_test'"

      - name: Setup release environment
        run: |
          # echo "::set-env name=VERSION::1.0.0"
          git config --global user.name ${{ secrets.GIT_USER }}
          git config --global user.email ${{ secrets.GIT_EMAIL }}
        env:
          VERSION: 1.0.0 
          
      - name: Release
        uses: ncipollo/release-action@v1
        with: 
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ env.VERSION }}
          commit: master 
          artifacts: "Windows Installer"